
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'net.researchgate.release'

def isSnapshot = version.endsWith('-SNAPSHOT')
def ossrhUsername = hasProperty('ossrhUsername') ? ossrhUsername : ""
def ossrhPassword = hasProperty('ossrhPassword') ? ossrhPassword : ""

project.group = 'com.velocidi'

project.ext.name = 'Velocidi-SDK'
project.ext.artifactId = "velocidi-android-sdk"
project.ext.description = 'Velocidi Android SDK'
project.ext.url = 'https://github.com/velocidi/velocidi-android-sdk'
project.version = version

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
            name project.ext.name
            artifactId project.ext.artifactId
            packaging 'aar'
            description project.ext.description
            url project.ext.url

            scm {
                connection 'scm:git@github.com:velocidi/velocidi-android-sdk.git'
                developerConnection 'scm:git@github.com:velocidi/velocidi-android-sdk.git'
                url 'https://github.com/velocidi/velocidi-android-sdk'
            }

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'velocidi'
                    name 'Velocidi'
                    email 'engineering@velocidi.com'
                }
            }
        }
    }
}

signing {
    required { !isSnapshot && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

release {
    failOnCommitNeeded = false
    failOnPublishNeeded = false
    preTagCommitMessage = "Set version to"
    tagCommitMessage = "Set tag to"
    newVersionCommitMessage = "Set version to"

    git {
        signTag = true
        requireBranch = 'travis-ci'
        pushToRemote = ''
    }
}

afterReleaseBuild.dependsOn uploadArchives
